import { Injector } from '@angular/core';
import { Http } from '@angular/http';
import { Interceptor, InterceptedResponse, InterceptedRequest } from 'ng2-interceptors';
import { Observable } from 'rxjs/Observable';
/**
 * Models
 */
import { HandlerConfig } from './config/handler.config';
export declare class RequestHandlerService implements Interceptor {
    private injector;
    private handlerConfig;
    private jwtHelper;
    constructor(injector: Injector, handlerConfig: HandlerConfig);
    /**
     * Injects http.
     */
    readonly http: Http;
    /**
     * Config helper function for testing purposes.
     */
    readonly config: HandlerConfig;
    /**
     * Run before any http request is made
     *
     * You can return:
     *   - Request: The modified request
     *   - Nothing: For convenience: It's just like returning the request
     *   - <any>(Observable.throw("cancelled")): Cancels the request,
     *     interrupting it from the pipeline, and calling back 'interceptAfter'
     *     in backwards order of those interceptors that got called up to this point.
     */
    interceptBefore(request: InterceptedRequest): InterceptedRequest | Observable<InterceptedRequest>;
    interceptAfter(response: InterceptedResponse): InterceptedResponse;
}
